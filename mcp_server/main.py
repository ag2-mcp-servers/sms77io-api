# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:28:04+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Query
from pydantic import AnyUrl, constr

from models import (
    Action,
    Action2,
    Action4,
    Action6,
    AnalyticsGetResponse,
    Debug,
    Details,
    EventType,
    Flash,
    GroupBy,
    HooksGetResponse,
    HooksPostResponse,
    Json,
    Json4,
    NoReload,
    Number,
    PerformanceTracking,
    RequestMethod,
    ReturnMsgId,
    SmsPostResponse,
    Unicode,
    Utf8,
    ValidateForVoicePostResponse,
    Xml,
)

app = MCPProxy(
    contact={
        'email': 'support@sms77.io',
        'name': 'Support',
        'url': 'https://sms77.io/en/company/contact',
    },
    description='sms77.io Swagger API. Get your API-Key now at sms77.io.',
    license={
        'name': 'Licensed by Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://sms77.io/en/company/terms/',
    title='sms77.io API',
    version='1.0.0',
    servers=[{'url': 'https://gateway.sms77.io/api'}],
)


@app.get(
    '/analytics',
    tags=['analytics_data_management'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def analytics(
    start: Optional[str] = None,
    end: Optional[str] = None,
    label: Optional[str] = None,
    subaccounts: Optional[str] = None,
    group_by: Optional[GroupBy] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/balance',
    tags=['account_balance_operations'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def balance():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/contacts',
    tags=['analytics_data_management', 'event_hook_management'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def contacts_get(action: Action, json_: Optional[Json] = Query(0, alias='json')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/contacts',
    tags=['contact_information_handling', 'sms_message_operations'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def contacts_p_o_s_t(
    action: Action2,
    json_: Optional[Json] = Query(0, alias='json'),
    id: Optional[str] = None,
    nick: Optional[str] = None,
    empfaenger: Optional[str] = None,
    email: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hooks',
    tags=['account_balance_operations'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def hooks_get(action: Action4):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/hooks',
    tags=['event_hook_management'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def hooks_p_o_s_t(
    action: Action6,
    id: Optional[int] = None,
    target_url: Optional[str] = None,
    event_type: Optional[EventType] = None,
    request_method: Optional[RequestMethod] = 'POST',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lookup',
    tags=[
        'analytics_data_management',
        'account_balance_operations',
        'contact_information_handling',
        'event_hook_management',
        'phone_lookup_services',
        'pricing_information_queries',
        'sms_message_operations',
        'message_status_tracking',
        'voice_message_operations',
    ],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def lookup(
    type: str, number: Number = ..., json_: Optional[str] = Query(None, alias='json')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lookup/cnam',
    tags=['analytics_data_management'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def lookup_cnam(number: Number):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lookup/format',
    tags=['account_balance_operations'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def lookup_format(number: Number):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lookup/hlr',
    tags=['account_balance_operations'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def lookup_hlr(number: Number):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lookup/mnp',
    tags=['account_balance_operations'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def lookup_mnp(number: Number, json_: Optional[str] = Query(None, alias='json')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pricing',
    tags=['pricing_information_queries'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def pricing(country: Optional[str] = None, format: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sms',
    tags=['sms_message_operations'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def sms(
    text: str,
    to: str = ...,
    from_: Optional[str] = Query(None, alias='from'),
    foreign_id: Optional[constr(pattern=r'^[A-Z|a-z|0-9|.|\-|_|@]+')] = None,
    label: Optional[constr(pattern=r'^[A-Z|a-z|0-9|.|\-|_|@]+')] = None,
    udh: Optional[str] = None,
    delay: Optional[str] = None,
    debug: Optional[Debug] = 0,
    no_reload: Optional[NoReload] = 0,
    unicode: Optional[Unicode] = 0,
    flash: Optional[Flash] = 0,
    utf8: Optional[Utf8] = 0,
    details: Optional[Details] = 0,
    return_msg_id: Optional[ReturnMsgId] = 0,
    json_: Optional[Json4] = Query(0, alias='json'),
    performance_tracking: Optional[PerformanceTracking] = 0,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/status',
    tags=['message_status_tracking'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def status(msg_id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/validate_for_voice',
    tags=['phone_lookup_services'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def validate_for_voice(number: str, callback: Optional[AnyUrl] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice',
    tags=['sms_message_operations'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def voice(
    to: str,
    text: constr(max_length=10000) = ...,
    xml: Optional[Xml] = None,
    from_: Optional[str] = Query(None, alias='from'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
